#pragma once

#include "Define.h"
#include "FeatureExtraction.h"
#include "InspectLibLog.h"
#include "InspectMura.h"
#include "MatBuf.h"

//enum ENUM_PARA_AVI_MURA_COMMON
//{
//	E_PARA_AVI_MURA_DUST_TEXT = 0,	//
//	E_PARA_AVI_MURA_DUST_BRIGHT_FLAG,	//
//	E_PARA_AVI_MURA_DUST_DARK_FLAG,	//
//	E_PARA_AVI_MURA_DUST_BIG_AREA,	//
//	E_PARA_AVI_MURA_DUST_ADJUST_RANGE,	//
//
//	E_PARA_AVI_MURA_JUDGE_EDGE_NUGI_TEXT,	//
//	E_PARA_AVI_MURA_JUDGE_EDGE_NUGI_USE,	//
//
//	E_PARA_AVI_MURA_COMMON_TEXT,	//
//	E_PARA_AVI_MURA_COMMON_GAUSSIAN_SIZE,	//
//	E_PARA_AVI_MURA_COMMON_GAUSSIAN_SIGMA,	//
//	E_PARA_AVI_MURA_COMMON_ESTIMATION_DIM_X,	//
//	E_PARA_AVI_MURA_COMMON_ESTIMATION_DIM_Y,	//
//	E_PARA_AVI_MURA_COMMON_ESTIMATION_STEP_X,	// 
//	E_PARA_AVI_MURA_COMMON_ESTIMATION_STEP_Y,	//	
//	E_PARA_AVI_MURA_COMMON_ESTIMATION_BRIGHT,	//
//	E_PARA_AVI_MURA_COMMON_ESTIMATION_DARK,	//
//
//	E_PARA_AVI_MURA_COMMON_TOTAL_COUNT							// Total
//};
//
//enum ENUM_PARA_AVI_MURA_GRAY
//{
//
//	E_PARA_AVI_MURA_GRAY_INSPECT_FLAG_TEXT = E_PARA_AVI_MURA_COMMON_TOTAL_COUNT,
//	E_PARA_AVI_MURA_GRAY_INSPECT_BRIGHT_FLAG,
//	E_PARA_AVI_MURA_GRAY_INSPECT_DARK_FLAG,
//	E_PARA_AVI_MURA_GRAY_INSPECT_MID_BRIGHT_FLAG,
//
//	E_PARA_AVI_MURA_GRAY_BRIGHT_TEXT,
//	E_PARA_AVI_MURA_GRAY_BRIGHT_THRESHOLD_WHITE_MURA_EDGE_AREA,
//	E_PARA_AVI_MURA_GRAY_BRIGHT_THRESHOLD_WHITE_MURA_ACTIVE,
//	E_PARA_AVI_MURA_GRAY_BRIGHT_THRESHOLD_WHITE_MURA_EDGE,
//	E_PARA_AVI_MURA_GRAY_BRIGHT_MORP,
//	E_PARA_AVI_MURA_GRAY_BRIGHT_DEL_AREA,
//
//	E_PARA_AVI_MURA_GRAY_DARK_TEXT,
//	E_PARA_AVI_MURA_GRAY_DARK_THRESHOLD,
//	E_PARA_AVI_MURA_GRAY_DARK_MORP,
//	E_PARA_AVI_MURA_GRAY_DARK_DEL_AREA,
//
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_TEXT,
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_ADJUST1_MIN_GV,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_RESIZE_LOOP_CNT,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_CONTRAST_VALUE,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_ADJUST2_MUTI_VALUE,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_CANNY_MIN,	//
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_CANNY_MAX,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_EDGE_DEL_LOOP,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_EDGE_DEL_MORP_SIZE,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_DEL_AREA,	// 
//	E_PARA_AVI_MURA_GRAY_MID_BRIGHT_DEFECT_MORP_RESIZE,	// 
//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_TEXT,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_MORP_OBJ,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_MORP_BKG,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_THRESHOLD,	//
//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_TEXT,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_BRIGHT_RATIO,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_RATIO_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_AREA_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_DIFF_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_RATIO_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_AREA_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_DIFF_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_RATIO_3,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_AREA_3,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_ACTIVE_SPEC_DARK_DIFF_3,	//
//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_TEXT,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_AREA_LEFT,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_AREA_TOP,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_AREA_RIGHT,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_AREA_BOTTOM,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_BRIGHT_RATIO,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_RATIO_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_AREA_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_DIFF_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_RATIO_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_AREA_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_DIFF_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_RATIO_3,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_AREA_3,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_SPOT_EDGE_SPEC_DARK_DIFF_3,	//
//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_TEXT,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_FLAG,
//	//E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_BRIGHT_RATIO,	
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_SPEC1_FLAG,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_RATIO_1,	// 
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA1_MIN,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA1_MAX,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_DIFF_1,	// 
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_SPEC2_FLAG,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_RATIO_2,	// 
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA2_MIN,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA2_MAX,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_DIFF_2,	// 
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_SPEC3_FLAG,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_RATIO_3,	// 
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA3_MIN,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA3_MAX,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_DIFF_3,	// 
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_SPEC4_FLAG,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_RATIO_4,	// 
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA4_MIN,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_AREA4_MAX,
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_ACTIVE_SPEC_DARK_DIFF_4,	// 
//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_TEXT,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_AREA_LEFT,	// Edge
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_AREA_TOP,	// Edge
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_AREA_RIGHT,	// Edge
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_AREA_BOTTOM,	// Edge
//	//E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_BRIGHT_RATIO,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_SPEC1_FLAG, //
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_RATIO_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA1_MIN,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA1_MAX,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_DIFF_1,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_SPEC2_FLAG, //
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_RATIO_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA2_MIN,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA2_MAX,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_DIFF_2,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_SPEC3_FLAG, //
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_RATIO_3,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA3_MIN,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA3_MAX,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_DIFF_3,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_SPEC4_FLAG, //
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_RATIO_4,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA4_MIN,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_AREA4_MAX,	//
//	E_PARA_AVI_MURA_GRAY_JUDGE_WHITE_MURA_EDGE_SPEC_DARK_DIFF_4,	//
//
//	E_PARA_AVI_MURA_TOTAL_COUNT											// Total
//};


class CInspectDust
{
public:
	CInspectDust(void);
	virtual ~CInspectDust(void);

	CMatBuf* cMem;
	void		SetMem(CMatBuf* data) { cMem = data; };
	CMatBuf* GetMem() { return	cMem; };

	int sz;
	InspectLibLog* m_cInspectLibLog;
	clock_t				m_tInitTime;
	clock_t				m_tBeforeTime;
	wchar_t* m_strAlgLog;

	void		SetLog(InspectLibLog* cLog, clock_t tTimeI, clock_t tTimeB, wchar_t* strLog)
	{
		m_tInitTime = tTimeI;
		m_tBeforeTime = tTimeB;
		m_cInspectLibLog = cLog;
		m_strAlgLog = strLog;
	};

	void		writeInspectLog(int nAlgType, char* strFunc, wchar_t* strTxt)
	{
		if (m_cInspectLibLog == NULL)
			return;

		m_tBeforeTime = m_cInspectLibLog->writeInspectLogTime(nAlgType, m_tInitTime, m_tBeforeTime, strFunc, strTxt, m_strAlgLog);
	};

	void		writeInspectLog_Memory(int nAlgType, char* strFunc, wchar_t* strTxt, __int64 nMemory_Use_Value = 0)
	{
		if (m_cInspectLibLog == NULL)
			return;

		m_tBeforeTime = m_cInspectLibLog->writeInspectLogTime(nAlgType, m_tInitTime, m_tBeforeTime, strFunc, strTxt, nMemory_Use_Value, m_strAlgLog);
	};
	//////////////////////////////////////////////////////////////////////////

	long		DoFindMuraDefect(cv::Mat matSrcBuffer, cv::Mat** matSrcBufferRGB, cv::Mat& matBKBuffer, cv::Mat& matDarkBuffer, cv::Mat& matBrightBuffer,
		cv::Point* ptCorner, double* dPara, int* nCommonPara, CString strAlgPath, stPanelBlockJudgeInfo* EngineerBlockDefectJudge, stDefectInfo* pResultBlob);

	//ÐÂÔöPS Mura
	long		LogicStart_Mura_PS(cv::Mat& matSrcImage, cv::Mat** matSrcBufferRGB, cv::Mat* matDstImage, cv::Mat& matBKBuffer, CRect rectROI, double* dPara,
		int* nCommonPara, CString strAlgPath);
protected:

	long		ImageSave(CString strPath, cv::Mat matSrcBuf);
	long		Estimation_XY(cv::Mat matSrcBuf, cv::Mat& matDstBuf, double* dPara, CMatBuf* cMemSub);
	long		DeleteArea3(cv::Mat& matSrcImage, int nCount, int nLength, CMatBuf* cMemSub = NULL);
	bool		OrientedBoundingBox(cv::RotatedRect& rect1, cv::RotatedRect& rect2);
};
